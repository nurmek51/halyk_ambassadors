import requests
import json
import time

class KazakhstanAddressValidator:
    """
    –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä –∞–¥—Ä–µ—Å–æ–≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–∞ –¥–ª—è MVP –ø—Ä–æ–µ–∫—Ç–æ–≤
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenStreetMap Nominatim API
    –ù–µ —Ç—Ä–µ–±—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ API –∫–ª—é—á–µ–π
    """
    
    def __init__(self):
        self.base_url = 'https://nominatim.openstreetmap.org/'
        self.headers = {
            'User-Agent': 'KazakhstanAddressValidator/1.0'
        }
        
    def search_address(self, query, max_results=5):
        """
        –ü–æ–∏—Å–∫ –∞–¥—Ä–µ—Å–∞ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ
        
        Args:
            query (str): –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü–∞, –∞–¥—Ä–µ—Å)
            max_results (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –∞–¥—Ä–µ—Å–µ
        """
        params = {
            'q': query,
            'countrycodes': 'kz',  # –¢–æ–ª—å–∫–æ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
            'format': 'json',
            'limit': max_results,
            'addressdetails': 1,
            'accept-language': 'ru,kk,en'
        }
        
        try:
            # –°–æ–±–ª—é–¥–∞–µ–º –ª–∏–º–∏—Ç 1 –∑–∞–ø—Ä–æ—Å –≤ —Å–µ–∫—É–Ω–¥—É
            time.sleep(1)
            
            response = requests.get(
                f"{self.base_url}search", 
                params=params, 
                headers=self.headers, 
                timeout=10
            )
            
            if response.status_code == 200:
                results = response.json()
                
                if results:
                    location = results[0]  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
                    address = location.get('address', {})
                    
                    return {
                        'found': True,
                        'address': location.get('display_name', ''),
                        'city': address.get('city', address.get('town', address.get('village', ''))),
                        'region': address.get('state', ''),
                        'district': address.get('county', ''),
                        'postcode': address.get('postcode', ''),
                        'latitude': float(location.get('lat', 0)),
                        'longitude': float(location.get('lon', 0)),
                        'confidence': location.get('importance', 0)
                    }
                else:
                    return {'found': False, 'error': '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'}
                    
            else:
                return {'found': False, 'error': f'HTTP {response.status_code}'}
                
        except Exception as e:
            return {'found': False, 'error': str(e)}
    
    def validate_address(self, address):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–¥—Ä–µ—Å
        
        Args:
            address (str): –ê–¥—Ä–µ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
            
        Returns:
            bool: True –µ—Å–ª–∏ –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω, False –µ—Å–ª–∏ –Ω–µ—Ç
        """
        result = self.search_address(address)
        return result.get('found', False)
    
    def get_coordinates(self, address):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∞–¥—Ä–µ—Å–∞
        
        Args:
            address (str): –ê–¥—Ä–µ—Å
            
        Returns:
            tuple: (latitude, longitude) –∏–ª–∏ (None, None) –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
        """
        result = self.search_address(address)
        if result.get('found'):
            return result['latitude'], result['longitude']
        return None, None

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    validator = KazakhstanAddressValidator()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    test_addresses = [
        "–ê–ª–º–∞—Ç—ã",
        "—É–ª–∏—Ü–∞ –ê–±–∞—è –ê–ª–º–∞—Ç—ã", 
        "–ê—Å—Ç–∞–Ω–∞, —É–ª–∏—Ü–∞ –õ–µ–ø—Å—ã 42/1",
        "–®—ã–º–∫–µ–Ω—Ç",
        "–Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥"
    ]
    
    for address in test_addresses:
        print(f"\n–¢–µ—Å—Ç–∏—Ä—É–µ–º: {address}")
        print("-" * 40)
        
        result = validator.search_address(address)
        
        if result['found']:
            print(f"‚úÖ –ù–ê–ô–î–ï–ù: {result['address']}")
            print(f"üèôÔ∏è –ì–æ—Ä–æ–¥: {result['city']}")
            print(f"üèõÔ∏è –û–±–ª–∞—Å—Ç—å: {result['region']}")
            print(f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result['latitude']:.4f}, {result['longitude']:.4f}")
            print(f"üìÆ –ò–Ω–¥–µ–∫—Å: {result['postcode']}")
        else:
            print(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù: {result['error']}")

# –°–æ–∑–¥–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
validator = KazakhstanAddressValidator()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–¥—Ä–µ—Å
address = "–ê–ª–º–∞—Ç—ã –ø—Ä–æ—Å–ø–µ–∫—Ç –ê–±–∞—è"
result = validator.search_address(address)

if result['found']:
    print(f"–ê–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω: {result['address']}")
    print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {result['latitude']}, {result['longitude']}")
else:
    print(f"–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω: {result['error']}")

# –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è
is_valid = validator.validate_address("–ê—Å—Ç–∞–Ω–∞")
print(f"–ê—Å—Ç–∞–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {is_valid}")

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
lat, lon = validator.get_coordinates("–®—ã–º–∫–µ–Ω—Ç")
print(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –®—ã–º–∫–µ–Ω—Ç–∞: {lat}, {lon}")
