"""add_user_profile_to_applications

Revision ID: 944ba5b3ed85
Revises: 849aa7e9ae7f
Create Date: 2025-09-16 12:29:42.131672

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '944ba5b3ed85'
down_revision: Union[str, None] = '849aa7e9ae7f'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Add column as nullable first to handle existing data
    op.add_column('applications', sa.Column('user_profile_id', sa.UUID(), nullable=True))
    
    # Create a default user profile for existing applications
    # First, get the first account and create a profile for it
    connection = op.get_bind()
    
    # Check if there are existing applications
    result = connection.execute(sa.text("SELECT COUNT(*) FROM applications"))
    count = result.scalar()
    
    if count > 0:
        # Get the first account
        result = connection.execute(sa.text("SELECT id FROM accounts LIMIT 1"))
        first_account = result.scalar()
        
        if first_account:
            # Create a default profile for this account if it doesn't exist
            connection.execute(sa.text("""
                INSERT INTO user_profiles (id, account_id, name, surname, position, address, created_at, updated_at)
                VALUES (gen_random_uuid(), :account_id, 'Default', 'User', 'Default Position', NULL, NOW(), NOW())
                ON CONFLICT (account_id) DO NOTHING
            """), {"account_id": first_account})
            
            # Get the profile ID
            result = connection.execute(sa.text("SELECT id FROM user_profiles WHERE account_id = :account_id"), {"account_id": first_account})
            profile_id = result.scalar()
            
            if profile_id:
                # Update existing applications to use this default profile
                connection.execute(sa.text("""
                    UPDATE applications SET user_profile_id = :profile_id WHERE user_profile_id IS NULL
                """), {"profile_id": profile_id})
    
    # Now make the column non-nullable
    op.alter_column('applications', 'user_profile_id', nullable=False)
    
    op.create_index('idx_applications_user_profile_id', 'applications', ['user_profile_id'], unique=False)
    op.create_foreign_key(None, 'applications', 'user_profiles', ['user_profile_id'], ['id'], ondelete='CASCADE')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'applications', type_='foreignkey')
    op.drop_index('idx_applications_user_profile_id', table_name='applications')
    op.drop_column('applications', 'user_profile_id')
    # ### end Alembic commands ###
